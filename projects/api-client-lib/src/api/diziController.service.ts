/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AdminGetAllDiziResponse } from '../model/adminGetAllDiziResponse';
import { CreateDiziRequest } from '../model/createDiziRequest';
import { DiziIdUploadfragmanBody } from '../model/diziIdUploadfragmanBody';
import { DiziIdUploadkapakBody } from '../model/diziIdUploadkapakBody';
import { DiziResponse } from '../model/diziResponse';
import { GetAllDiziResponse } from '../model/getAllDiziResponse';
import { GetDiziByNameResponse } from '../model/getDiziByNameResponse';
import { ProblemDetails } from '../model/problemDetails';
import { UpdateDiziRequest } from '../model/updateDiziRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DiziControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDizi(body: CreateDiziRequest, observe?: 'body', reportProgress?: boolean): Observable<DiziResponse>;
    public addDizi(body: CreateDiziRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiziResponse>>;
    public addDizi(body: CreateDiziRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiziResponse>>;
    public addDizi(body: CreateDiziRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addDizi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DiziResponse>('post',`${this.basePath}/dizi/admin/add-dizi`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminGetAllDizi(observe?: 'body', reportProgress?: boolean): Observable<Array<AdminGetAllDiziResponse>>;
    public adminGetAllDizi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AdminGetAllDiziResponse>>>;
    public adminGetAllDizi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AdminGetAllDiziResponse>>>;
    public adminGetAllDizi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AdminGetAllDiziResponse>>('get',`${this.basePath}/dizi/admin/getalldizi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDizi(id: number, observe?: 'body', reportProgress?: boolean): Observable<DiziResponse>;
    public deleteDizi(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiziResponse>>;
    public deleteDizi(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiziResponse>>;
    public deleteDizi(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDizi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<DiziResponse>('delete',`${this.basePath}/dizi/admin/deletedizi/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllDizi(observe?: 'body', reportProgress?: boolean): Observable<Array<GetAllDiziResponse>>;
    public getAllDizi(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetAllDiziResponse>>>;
    public getAllDizi(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetAllDiziResponse>>>;
    public getAllDizi(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<GetAllDiziResponse>>('get',`${this.basePath}/dizi/getalldizi`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param diziName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDiziById(diziName: string, observe?: 'body', reportProgress?: boolean): Observable<GetDiziByNameResponse>;
    public getDiziById(diziName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetDiziByNameResponse>>;
    public getDiziById(diziName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetDiziByNameResponse>>;
    public getDiziById(diziName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (diziName === null || diziName === undefined) {
            throw new Error('Required parameter diziName was null or undefined when calling getDiziById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetDiziByNameResponse>('get',`${this.basePath}/dizi/${encodeURIComponent(String(diziName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDizi(body: UpdateDiziRequest, observe?: 'body', reportProgress?: boolean): Observable<DiziResponse>;
    public updateDizi(body: UpdateDiziRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiziResponse>>;
    public updateDizi(body: UpdateDiziRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiziResponse>>;
    public updateDizi(body: UpdateDiziRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateDizi.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DiziResponse>('put',`${this.basePath}/dizi/admin/update-dizi`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param diziId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadFragman1(diziId: number, body?: DiziIdUploadfragmanBody, observe?: 'body', reportProgress?: boolean): Observable<DiziResponse>;
    public uploadFragman1(diziId: number, body?: DiziIdUploadfragmanBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiziResponse>>;
    public uploadFragman1(diziId: number, body?: DiziIdUploadfragmanBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiziResponse>>;
    public uploadFragman1(diziId: number, body?: DiziIdUploadfragmanBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (diziId === null || diziId === undefined) {
            throw new Error('Required parameter diziId was null or undefined when calling uploadFragman1.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DiziResponse>('post',`${this.basePath}/dizi/admin/${encodeURIComponent(String(diziId))}/upload-fragman`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param diziId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadKapak1(diziId: number, body?: DiziIdUploadkapakBody, observe?: 'body', reportProgress?: boolean): Observable<DiziResponse>;
    public uploadKapak1(diziId: number, body?: DiziIdUploadkapakBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DiziResponse>>;
    public uploadKapak1(diziId: number, body?: DiziIdUploadkapakBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DiziResponse>>;
    public uploadKapak1(diziId: number, body?: DiziIdUploadkapakBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (diziId === null || diziId === undefined) {
            throw new Error('Required parameter diziId was null or undefined when calling uploadKapak1.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<DiziResponse>('post',`${this.basePath}/dizi/admin/${encodeURIComponent(String(diziId))}/upload-kapak`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
