/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AdminGetAllFilmsResponse } from '../model/adminGetAllFilmsResponse';
import { CreateFilmRequest } from '../model/createFilmRequest';
import { FilmIdUploadfilmBody } from '../model/filmIdUploadfilmBody';
import { FilmIdUploadfragmanBody } from '../model/filmIdUploadfragmanBody';
import { FilmIdUploadkapakBody } from '../model/filmIdUploadkapakBody';
import { FilmResponse } from '../model/filmResponse';
import { GetAllFilmsResponse } from '../model/getAllFilmsResponse';
import { GetFilmByNameResponse } from '../model/getFilmByNameResponse';
import { ProblemDetails } from '../model/problemDetails';
import { UpdateFilmRequest } from '../model/updateFilmRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class FilmControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFilm(body: CreateFilmRequest, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public addFilm(body: CreateFilmRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public addFilm(body: CreateFilmRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public addFilm(body: CreateFilmRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addFilm.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FilmResponse>('post',`${this.basePath}/film/admin/addfilm`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminGetAllFilms(observe?: 'body', reportProgress?: boolean): Observable<Array<AdminGetAllFilmsResponse>>;
    public adminGetAllFilms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AdminGetAllFilmsResponse>>>;
    public adminGetAllFilms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AdminGetAllFilmsResponse>>>;
    public adminGetAllFilms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AdminGetAllFilmsResponse>>('get',`${this.basePath}/film/admin/getallfilms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFilm(id: number, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public deleteFilm(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public deleteFilm(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public deleteFilm(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteFilm.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<FilmResponse>('delete',`${this.basePath}/film/admin/deletefilm/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllFilms(observe?: 'body', reportProgress?: boolean): Observable<Array<GetAllFilmsResponse>>;
    public getAllFilms(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<GetAllFilmsResponse>>>;
    public getAllFilms(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<GetAllFilmsResponse>>>;
    public getAllFilms(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<GetAllFilmsResponse>>('get',`${this.basePath}/film/getallfilms`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filmName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFilmById(filmName: string, observe?: 'body', reportProgress?: boolean): Observable<GetFilmByNameResponse>;
    public getFilmById(filmName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetFilmByNameResponse>>;
    public getFilmById(filmName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetFilmByNameResponse>>;
    public getFilmById(filmName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filmName === null || filmName === undefined) {
            throw new Error('Required parameter filmName was null or undefined when calling getFilmById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetFilmByNameResponse>('get',`${this.basePath}/film/${encodeURIComponent(String(filmName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateilm(body: UpdateFilmRequest, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public updateilm(body: UpdateFilmRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public updateilm(body: UpdateFilmRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public updateilm(body: UpdateFilmRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateilm.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FilmResponse>('put',`${this.basePath}/film/admin/updatefilm`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filmId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadFilm(filmId: number, body?: FilmIdUploadfilmBody, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public uploadFilm(filmId: number, body?: FilmIdUploadfilmBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public uploadFilm(filmId: number, body?: FilmIdUploadfilmBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public uploadFilm(filmId: number, body?: FilmIdUploadfilmBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filmId === null || filmId === undefined) {
            throw new Error('Required parameter filmId was null or undefined when calling uploadFilm.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FilmResponse>('post',`${this.basePath}/film/admin/${encodeURIComponent(String(filmId))}/upload-film`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filmId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadFragman(filmId: number, body?: FilmIdUploadfragmanBody, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public uploadFragman(filmId: number, body?: FilmIdUploadfragmanBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public uploadFragman(filmId: number, body?: FilmIdUploadfragmanBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public uploadFragman(filmId: number, body?: FilmIdUploadfragmanBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filmId === null || filmId === undefined) {
            throw new Error('Required parameter filmId was null or undefined when calling uploadFragman.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FilmResponse>('post',`${this.basePath}/film/admin/${encodeURIComponent(String(filmId))}/upload-fragman`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param filmId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadKapak(filmId: number, body?: FilmIdUploadkapakBody, observe?: 'body', reportProgress?: boolean): Observable<FilmResponse>;
    public uploadKapak(filmId: number, body?: FilmIdUploadkapakBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FilmResponse>>;
    public uploadKapak(filmId: number, body?: FilmIdUploadkapakBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FilmResponse>>;
    public uploadKapak(filmId: number, body?: FilmIdUploadkapakBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (filmId === null || filmId === undefined) {
            throw new Error('Required parameter filmId was null or undefined when calling uploadKapak.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FilmResponse>('post',`${this.basePath}/film/admin/${encodeURIComponent(String(filmId))}/upload-kapak`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
